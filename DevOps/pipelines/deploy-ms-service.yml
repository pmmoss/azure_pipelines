# Deploy Microsoft Services to GT-LB-$(ENV)-APP-* servers
# Sets Variables for BuildReleaseVersion, ApplicationName, LaunchDarklyApplicationName
# Parameterized for ENV (PROD,QA,DEV)
parameters:
  GT_ServiceName: ''
  GT_workingFolder: ''
  GT_APP_NAME: ''
steps:
# Set Variables
- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:BuildReleaseVersion to: $(Build.BuildNumber)'
  inputs:
    VariableName: BuildReleaseVersion
    Value: '$(Build.BuildNumber)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  to: Set variable:ApplicationName'
  inputs:
    VariableName: ApplicationName
    Value: '${{ parameters.GT_APP_NAME }} $(ENV)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  LaunchDarklyApplicationName'
  inputs:
    VariableName: LaunchDarklyApplicationName
    Value: '${{ parameters.GT_APP_NAME }}'

- ${{ if eq(parameters.GT_APP_NAME, 'GTBatch') }}:
  - task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
    displayName: 'Set variable:  SendServiceErrorEmail'
    inputs:
      VariableName: SendServiceErrorEmail
      Value: 'true'


# Change Tokens for app.config
- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace Tokens: g:\Gauge\GTDeploy\${{ parameters.GT_workingFolder }}'
  inputs:
    rootDirectory: 'g:\Gauge\GTDeploy\${{ parameters.GT_workingFolder }}'
    targetFiles: '**/*.config'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: true
    tokenPrefix: '#{'
    tokenSuffix: '}'

# Powershell on machine action
- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Build-InlinePowershell.Xpirit-Vsts-Build-InlinePowershell.InlinePowershell@1
  displayName: 'Inline Powershell'
  inputs:
    ScriptArguments: '-serviceName ${{ parameters.GT_ServiceName }} -workingfolder ${{ parameters.GT_workingFolder }} '
    Script: |
      Param(
      [string]$ServiceName,
      [string]$workingFolder
      )
      # Variables
      $eventlogname                  = $ServiceName.substring(0, 7)
      $process                       = ($ServiceName -replace "GT_", "") + "Service"
      $rootDir                       = "G:\Gauge\GTApplications"
      $ServiceDirectory              = "$rootDir\$workingFolder"
      $BackupDirectory               = "g:\Gauge\GTBackups"
      $BackupLocation                = "$BackupDirectory\$((Get-Date).ToString('MM-dd-yyyy_HH-mm'))-$ServiceName"
      $InstallSourceDirectory        = "G:\Gauge\GTDeploy\$workingFolder"
      $InstallDestinationDirectory   =  $rootDir
      $SQLServerTypesFiles           = "$ServiceDirectory\SqlServerTypes\x86\*"
      
      Write-Output "Settings"
      Write-Output "    EventLog Name:                        $eventlogname"
      Write-Output "    Service Name:                         $ServiceName"
      Write-Output "    Process Name:                         $process"  
      Write-Output "    Service Directory:                    $ServiceDirectory"
      Write-Output "    Backup Directory:                     $BackupDirectory"
      Write-Output "    Backup Location:                      $BackupLocation"
      Write-Output "    Install Source Directory:             $InstallSourceDirectory"
      Write-Output "    Install Destination Directory:        $InstallDestinationDirectory"
      Write-Output "    SQLServerTypes Files :                $SQLServerTypesFiles"
      Write-Output ""

      #######################################################################################################
      ## Logoff users SMB Sessions 
      $sessions = Get-SmbSession  
      ForEach($session in $sessions){
        write-host "Closing open session: " ($session | Select-object ClientUserName )
      }
      $sessions | Close-SmbSession -Force
      ## log off user
      try {
        query user /server:localhost 2>&1 | select -skip 1 | foreach {
        logoff ($_ -split "\s+")[-6] /server:localhost
        }
      }
      catch {&_}
      
      #  logic to see state of the service
      Write-Output "Processing $ServiceName update..."
      $originalstatus = (Get-Service -Name $ServiceName).status 
      Write-Output $originalstatus

      # Test That directory Exists
      Write-Output " Testing source for files:  "
      try {Test-Path $InstallSourceDirectory}
      catch{
        Write-Output "   ERROR:  $InstallSourceDirectory Source not found  "
      }

      # Stop Service if it is running
      if($originalstatus -eq "Running"){
          Write-Output "    Stopping service $ServiceName..."
          Get-Service -name $ServiceName | Stop-Service 
          (Get-Service -name $ServiceName ).WaitForStatus('Stopped')
          Write-Output (Get-Service -Name $ServiceName).status
        # Validate Process Handles 
          Write-Output $process "Handlecount: " -ErrorAction SilentlyContinue
          (Get-Process -Name $Process -ErrorAction SilentlyContinue).HandleCount 
          Wait-Process -Name $Process -Timeout 120 -ErrorAction SilentlyContinue
          Start-Sleep -s 15
              
      }
      
      <# Take Backup
      Write-Output "    Creating backup for $ServiceDirectory..."
      If(!(Test-Path $BackupDirectory))
      {
        Write-Output "    Creating backup directory $BackupDirectory..."
        New-Item -ItemType Directory -Force -Path $BackupDirectory | Out-Null
      }

      Compress-Archive -Path $ServiceDirectory -CompressionLevel Fastest -DestinationPath $BackupLocation -Force

      Write-Output "    Backup created in $BackupLocation"
      Write-Output ""
      #>


      # Remove old files and Update with new files
      Write-Output "    Updating service $ServiceName..."
      Write-output  "    Removing $ServiceDirectory..."
      if (Test-Path $ServiceDirectory) {
        Write-Output "    ServiceDirectory found at: ($ServiceDirectory) - Removing...."
        Remove-Item -Path $ServiceDirectory -Recurse
      }

      Write-Output "    Copy Files $InstallSourceDirectory  to $InstallDestinationDirectory"
      Write-Output (Get-Service -Name $ServiceName).status
      Copy-Item $InstallSourceDirectory -Destination $InstallDestinationDirectory -Recurse -Force
      Write-Output "    Copy Files $SQLServerTypesFiles to $ServiceDirectory"
      Copy-Item $SQLServerTypesFiles  -Destination $ServiceDirectory -Force
      Write-Output "    $ServiceName service updated"


      #####  Restore Original State of the Service
      Write-Output "    Restoring original State ($originalstatus) of service $ServiceName..."

      # Start Service
      # Special Conditional for GTBatch as in lower evvironments it cannot run
      if($serviceName -ne 'GT_GTBatch'){
        Start-Service -name $ServiceName 
      }
      else {
        $srv = $Env:Computername
        if ($srv -like "*PRD*") {
           Start-Service -name $ServiceName
        }
        else {
          Write-Output "GTBatch Service should not start"
        }
      }
      Write-Output (Get-Service -Name $ServiceName ).status
      Write-Output "    $ServiceName update complete!"
      Write-Output (Get-Service -Name $ServiceName ).status
      #write-output "Sleep 11 seconds for events"
      #Start-Sleep -s 11
