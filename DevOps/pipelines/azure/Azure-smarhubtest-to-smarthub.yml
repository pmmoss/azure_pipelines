# deploy-ms-iis.yml

parameters:
  WebsiteName: 'SmartHub_test'
  WebsiteSource: 'SmartHub_test'
  GT_APP_NAME: 'Smarthub_test'
steps:
# Set Variables
- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:BuildReleaseVersion to: $(Build.BuildNumber)'
  inputs:
    VariableName: BuildReleaseVersion
    Value: '$(Build.BuildNumber)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  to: Set variable:ApplicationName'
  inputs:
    VariableName: ApplicationName
    Value: '${{ parameters.GT_APP_NAME }} $(ENV)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  LaunchDarklyApplicationName'
  inputs:
    VariableName: LaunchDarklyApplicationName
    Value: '${{ parameters.GT_APP_NAME }}'

- task: IISWebAppManagementOnMachineGroup@0
  displayName: 'Stop ${{ parameters.WebsiteName }} AppPool'
  inputs:
    iISDeploymentType: iISApplicationPool
    actionIISApplicationPool: stopAppPool
    startStopRecycleAppPoolName: ${{ parameters.WebsiteName }}

- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Build-InlinePowershell.Xpirit-Vsts-Build-InlinePowershell.InlinePowershell@1
  displayName: ' PowerShell Backup Folder ${{ parameters.WebsiteName }}'
  inputs:
    targetType: Inline
    ScriptArguments: ' -WebsiteName ${{ parameters.WebsiteName }}'
    script: |
      Param(
      [string]$WebsiteName = "Smarthub_ZZZ"
      )
      Write-Output "Greetings from deploy-Smarthub-PROD.yml"
      # Variables
      $rootDir                       = "C:\Gauge\GTApplications"
      $SourceDirectory               = "$rootDir\SmartHub_Test"
      $DirToExclude                  = "Files"
      $ServiceDirectory              = "G:\$WebsiteName"
      $BackupDirectory               = "G:\Gauge\GTBackups"
      $BackupLocation                = "$BackupDirectory\$((Get-Date).ToString('MM-dd-yyyy_HH-mm'))-$WebsiteName"
      $InstallDestinationDirectory   = $rootDir
      $removestring1                 = 'debug="true"'
      $removestring2                 = '<customErrors mode="Off" />'
      Write-Output "Settings"
      Write-Output "    Root Dir                       = $rootDir"
      Write-Output "    SourceDirectory                = $SourceDirectory"
      Write-Output "    DirToExclude                   = $DirToExclude"
      Write-Output "    ServiceDirectory               = $ServiceDirectory"
      Write-Output "    BackupDirectory                = $BackupDirectory"
      Write-Output "    BackupLocation                 = $BackupLocation"
      Write-Output "    InstallDestinationDirectory    = $InstallDestinationDirectory"

      ## Logoff users SMB Sessions 
      $sessions = Get-SmbSession  
      ForEach($session in $sessions){
        write-host "Closing open session: " ($session | Select-object ClientUserName )
      }
      $sessions | Close-SmbSession -Force
      try {
        query user /server:localhost 2>&1 | select -skip 1 | foreach {
        logoff ($_ -split "\s+")[-6] /server:localhost
        }
      }
      catch {&_} 

      ## Copy 
      Get-ChildItem "$SourceDirectory" -File | Copy-Item -Destination $ServiceDirectory
      Get-ChildItem "$SourceDirectory" -Directory | 
         Where-Object{$_.Name -notin $DirToExclude } | 
         Copy-Item -Destination $ServiceDirectory -Recurse -Force
      ## Remove 
      $temp = ((Get-Content -path $ServiceDirectory\Web.config -Raw) -replace $removestring1,'') 
      $temp = $temp -replace $removestring2,''
      #write-output $temp
      $temp | Set-Content -Path $ServiceDirectory\Web.config

- task: qetza.xdttransform.xdttransform-task.xdttransform@2
  displayName: 'Apply transforms Web.tokenize.config => Web.config'
  inputs:
    workingFolder: 'G:\${{ parameters.WebsiteName }}'
    transforms: 'Web.tokenize.config => Web.config'


- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace Tokens: G:\${{ parameters.WebsiteName }}'
  inputs:
    rootDirectory: 'G:\${{ parameters.WebsiteName }}'
    targetFiles: 'Web.config'
    encodinC: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: true
    tokenPrefix: '#{'
    tokenSuffix: '}'

- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Build-InlinePowershell.Xpirit-Vsts-Build-InlinePowershell.InlinePowershell@1
  displayName: 'SQL Server Types Deploy'
  inputs:
    ScriptArguments: '-WebsiteName ${{ parameters.WebsiteName }} '
    Script: |
      Param(
       [string]$WebsiteName
      )
      # Variables
      $rootDir                       = "G:\"
      $ServiceDirectory              = "$rootDir\$WebsiteName\bin"
      $SQLServerTypesFiles           = "$ServiceDirectory\SqlServerTypes\x64\*"

      Write-Output "Settings"
      Write-Output "    RootDir Name:                         $rootDir "
      Write-Output "    Website Name:                         $WebsiteName"
      Write-Output "    SQL Source Directory:                 $ServiceDirectory"
      Write-Output "    SQLServerTypes Files :                $SQLServerTypesFiles"
      Write-Output ""
      #######################################################################################################
      Write-Output "    Copy Files $SQLServerTypesFiles to $ServiceDirectory"
      Copy-Item $SQLServerTypesFiles  -Destination $ServiceDirectory -Force
      Write-Output "    $ServiceName service updated"
      $temp = Get-Content -path $rootDir\$WebsiteName\Web.config -Raw
      write-output $temp

- task: IISWebAppManagementOnMachineGroup@0
  displayName: 'Start ${{ parameters.WebsiteName }} AppPool'
  inputs:
    iISDeploymentType: iISApplicationPool
    actionIISApplicationPool: startAppPool
    startStopRecycleAppPoolName: ${{ parameters.WebsiteName }}

- task: SmokeWebTest@1
  displayName: 'Smoke testing $(url)'
  inputs:
    url: '$(SmartHubUrl)'
    expectedReturnCode: '200'
    timeout: '100'