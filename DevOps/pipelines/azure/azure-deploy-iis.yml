# deploy-ms-iis.yml

parameters:
  WebsiteName: 'SmartHub'
  WebsiteSource: 'SmartHub'
  GT_APP_NAME: 'Smarthub'
steps:
# Set Variables
- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:BuildReleaseVersion to: $(Build.BuildNumber)'
  inputs:
    VariableName: BuildReleaseVersion
    Value: '$(Build.BuildNumber)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  to: Set variable:ApplicationName'
  inputs:
    VariableName: ApplicationName
    Value: '${{ parameters.GT_APP_NAME }} $(ENV)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set variable:  LaunchDarklyApplicationName'
  inputs:
    VariableName: LaunchDarklyApplicationName
    Value: '${{ parameters.GT_APP_NAME }}'

- task: IISWebAppManagementOnMachineGroup@0
  displayName: 'Stop ${{ parameters.WebsiteName }} AppPool'
  inputs:
    iISDeploymentType: iISApplicationPool
    actionIISApplicationPool: stopAppPool
    startStopRecycleAppPoolName: ${{ parameters.WebsiteName }}


# IIS web app deploy
# Deploy a website or web application using Web Deploy
- task: IISWebAppDeploymentOnMachineGroup@0
  displayName: 'DEploy ${{ parameters.WebsiteName }}'
  inputs:
    webSiteName: '${{ parameters.WebsiteName }}'
    takeAppOfflineFlag: true
    package: '$(Pipeline.Workspace)/**/${{ parameters.WebsiteSource }}\*.zip' 


- task: qetza.xdttransform.xdttransform-task.xdttransform@2
  displayName: 'Apply transforms Web.tokenize.config => Web.config'
  inputs:
    workingFolder: 'c:\Gauge\GTApplications\${{ parameters.WebsiteName }}'
    transforms: 'Web.tokenize.config => Web.config'


- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace Tokens: c:\Gauge\GTApplications\${{ parameters.WebsiteName }}'
  inputs:
    rootDirectory: 'c:\Gauge\GTApplications\${{ parameters.WebsiteName }}'
    targetFiles: 'Web.config'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: true
    tokenPrefix: '#{'
    tokenSuffix: '}'

- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Build-InlinePowershell.Xpirit-Vsts-Build-InlinePowershell.InlinePowershell@1
  displayName: 'SQL Server Types Deploy'
  inputs:
    ScriptArguments: '-WebsiteName ${{ parameters.WebsiteName }} '
    Script: |
      Param(
       [string]$WebsiteName
      )
      # Variables
      $rootDir                       = "c:\Gauge\GTApplications"
      $ServiceDirectory              = "$rootDir\$WebsiteName\bin"
      $SQLServerTypesFiles           = "$ServiceDirectory\SqlServerTypes\x64\*"

      Write-Output "Settings"
      Write-Output "    RootDir Name:                         $rootDir "
      Write-Output "    Website Name:                         $WebsiteName"
      Write-Output "    SQL Source Directory:                 $ServiceDirectory"
      Write-Output "    SQLServerTypes Files :                $SQLServerTypesFiles"
      Write-Output ""

      #######################################################################################################
      Write-Output "    Copy Files $SQLServerTypesFiles to $ServiceDirectory"
      Copy-Item $SQLServerTypesFiles  -Destination $ServiceDirectory -Force
      Write-Output "    $ServiceName service updated"
      $temp = Get-Content -path $rootDir\$WebsiteName\Web.config -Raw
      write-output $temp

- task: IISWebAppManagementOnMachineGroup@0
  displayName: 'Start ${{ parameters.WebsiteName }} AppPool'
  inputs:
    iISDeploymentType: iISApplicationPool
    actionIISApplicationPool: startAppPool
    startStopRecycleAppPoolName: ${{ parameters.WebsiteName }}

- task: SmokeWebTest@1
  displayName: 'Smoke testing $(SmartHubUrl)'
  inputs:
    url: '$(SmartHubUrl)'
    expectedReturnCode: '200'
    timeout: '100'